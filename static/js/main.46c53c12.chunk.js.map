{"version":3,"sources":["components/dynamicFormElements/Form.tsx","components/dynamicFormElements/TextField.tsx","components/dynamicFormElements/SelectField.tsx","components/dynamicFormElements/CheckboxField.tsx","services/getDynamicFormElement.tsx","components/dynamicFormElements/SubmitButton.tsx","components/DynamicForm.tsx","constants/forms/sampleForm.ts","App.tsx","services/initDynamicForm.ts","index.tsx"],"names":["Form","props","className","children","TextField","name","label","placeholder","rest","htmlFor","type","id","render","msg","style","color","SelectField","options","as","value","map","optn","index","CheckboxField","getFormElement","elementName","elementSchema","SubmitButton","title","isSubmitting","useFormikContext","disabled","DynamicForm","formData","formSchema","validationSchema","onSubmit","enableReinitialize","initialValues","Object","keys","key","ind","condition","validate","String","values","split","required","surname","email","role","check1","check2","App","sampleForm","useState","setFormData","setValidationSchema","useEffect","_formData","_validationSchema","Yup","min","oneOf","opt","shape","initDynamicForm","setSubmitting","resetForm","setStatus","console","log","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46c53c12.chunk.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport {\n    Formik,\n    Form as FormikForm,\n    FormikValues, FormikConfig\n} from 'formik';\n\nexport const Form: FunctionComponent<FormikConfig<FormikValues>> = (props) => {\n    return (\n        <Formik\n            {...props}\n        >\n            <FormikForm className=\"needs-validation\">\n                {props.children}\n            </FormikForm>\n        </Formik>)\n}","import React, {FunctionComponent} from 'react';\nimport {\n    Field,\n    ErrorMessage,\n} from 'formik';\n\nexport const TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { name, label, placeholder, ...rest } = props;\n    return (\n        <>\n            {label && <label htmlFor={name}>{label}</label>}\n            <Field\n                className=\"form-control\"\n                type=\"text\"\n                name={name}\n                id={name}\n                placeholder={placeholder || \"\"}\n                {...rest}\n            />\n            <ErrorMessage name={name} render={(msg: string) => <div style={{ color: 'red' }} >{msg}</div>} />\n        </>\n    )\n};\n\ninterface TextFieldProps {\n    name: string;\n    label: string;\n    placeholder?: string;\n}","import React from 'react';\nimport {\n    Field,\n    ErrorMessage,\n} from 'formik';\n\nexport const SelectField = (props: SelectFieldProps) => {\n    const { name, label, options } = props;\n    return (\n        <>\n            {label && <label htmlFor={name}>{label}</label>}\n            <Field\n                as=\"select\"\n                id={name}\n                name={name}\n            >\n                <option value=\"\" >Choose...</option>\n                {options.map((optn, index) => <option value={optn.value}> {optn.label || optn.value}</option>)}\n            </Field>\n            <ErrorMessage name={name} render={msg => <div style={{ color: 'red' }} >{msg}</div>} />\n        </>\n    )\n};\n\ninterface SelectFieldProps {\n    name: string;\n    label: string;\n    options: [ { label: string; value: string; } ];\n}","import React from 'react';\nimport {\n    Field,\n    ErrorMessage,\n} from 'formik';\n\nexport const CheckboxField = (props: CheckboxFieldProps) => {\n    const { name, label } = props;\n\n    return (<>\n            <Field type=\"checkbox\" name={name} />\n            <label htmlFor={name}>{label ? label : name}</label>\n            <ErrorMessage name={name} render={msg => <div style={{ color: 'red' }} >{msg}</div>} />\n        </>\n    )\n}\n\ninterface CheckboxFieldProps {\n    name: string;\n    label?: string;\n}","import React from \"react\";\nimport {TextField} from \"../components/dynamicFormElements/TextField\";\nimport {SelectField} from \"../components/dynamicFormElements/SelectField\";\nimport {CheckboxField} from \"../components/dynamicFormElements/CheckboxField\";\n\nexport const getFormElement = (elementName: string, elementSchema: any) => {\n    const props = {\n        name: elementName,\n        label: elementSchema.label,\n        options: elementSchema.options\n    };\n\n    switch(elementSchema.type){\n        case \"text\":\n        case \"email\":\n            return <TextField {...props} />;\n\n        case \"select\":\n            return <SelectField {...props} />;\n\n        case \"checkbox\":\n            return <CheckboxField {...props} />;\n\n    }\n};","import React, {FunctionComponent} from 'react';\nimport {\n    useFormikContext,\n} from 'formik';\n\nexport const SubmitButton : FunctionComponent<SubmitButtonProps> = (props) => {\n    const { title, ...rest } = props;\n    const { isSubmitting } = useFormikContext();\n\n    return (\n        <button type=\"submit\" {...rest} disabled={isSubmitting}>{title}</button>\n    )\n};\n\ninterface SubmitButtonProps {\n    title: string;\n}","import React from \"react\";\nimport {Form} from \"./dynamicFormElements/Form\";\nimport {FormikConsumer} from \"formik\";\nimport {getFormElement} from \"../services/getDynamicFormElement\";\nimport {SubmitButton} from \"./dynamicFormElements/SubmitButton\";\n\nexport const DynamicForm = (props: DynamicFormProps) => {\n    const {formData, formSchema, validationSchema, onSubmit} = props;\n    return  <Form\n        enableReinitialize\n        initialValues={formData}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {Object.keys(formSchema).map( (key, ind) => (\n            <div key={key}>\n                {formSchema[key].condition ?\n                    <FormikConsumer>\n                        {({ validationSchema, validate, ...rest }) => (\n                            <>\n                                {String(rest.values[formSchema[key].condition.split('.')[0]]) === String(formSchema[key].condition.split('.')[1]) &&\n                                getFormElement(key, formSchema[key])}\n                            </>\n                        )}\n                    </FormikConsumer> :\n                    getFormElement(key, formSchema[key])\n                }\n            </div>\n        ))}\n        <SubmitButton title=\"Submit\" />\n        {/*<Debug />*/}\n    </Form>\n}\n\ninterface DynamicFormProps {\n    formData: any,\n    validationSchema: any,\n    formSchema: any,\n    onSubmit: any,\n}","export default {\n  name: {\n    type: \"text\",\n    label: \"Name\",\n    required: true,\n  },\n  surname: {\n    type: \"text\",\n    label: \"Surname\",\n    required: false\n  },\n  email: {\n    type: \"email\",\n    label: \"Email\",\n    required: true,\n  },\n  role: {\n    type: \"select\",\n    label: \"Role\",\n    required: true,\n    options: [\n      {\n        label: \"Admin\",\n        value: \"admin\"\n      },\n      {\n        label: \"Damian\",\n        value: \"damian\"\n      },\n      {\n        label: \"User\",\n        value: \"user\"\n      },\n      {\n        label: \"Customer\",\n        value: \"customer\"\n      }\n    ]\n  },\n  check1: {\n    type: \"checkbox\",\n    label: \"TEST\",\n    required: true,\n    condition: \"role.admin\"\n  },\n  check2: {\n    type: \"checkbox\",\n    label: \"test2\",\n    condition: \"check1.true\"\n  }\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {initDynamicForm} from \"./services/initDynamicForm\";\nimport {DynamicForm} from \"./components/DynamicForm\";\nimport sampleForm from \"./constants/forms/sampleForm\";\n\nconst App = () => {\n  const formSchema = sampleForm;\n  const [formData, setFormData] = useState({});\n  const [validationSchema, setValidationSchema] = useState({});\n\n  useEffect(() => {\n    initDynamicForm(formSchema, setFormData, setValidationSchema);\n  }, [formSchema]);\n\n  const onSubmit = (values: any, { setSubmitting, resetForm, setStatus }: any) => {\n    console.log(values);\n    setSubmitting(false);\n  };\n\n  return (\n    <div className=\"App\">\n    <h2>FORM!</h2>\n      <div>\n        <DynamicForm formData={formData} validationSchema={validationSchema} formSchema={formSchema} onSubmit={onSubmit}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as Yup from 'yup';\n\nexport const initDynamicForm = (formSchema: any, setFormData: Function, setValidationSchema: Function) => {\n    let _formData: any = {};\n    let _validationSchema: any = {};\n\n    for(var key of Object.keys(formSchema)){\n        _formData[key] = \"\";\n\n        switch(formSchema[key].type){\n            case \"text\":\n                _validationSchema[key] = Yup.string();\n                break;\n            case \"email\":\n                _validationSchema[key] = Yup.string().email();\n                break;\n            case \"password\":\n                _validationSchema[key] = Yup.string().min(8);\n                break;\n            case \"select\":\n                _validationSchema[key] = Yup.string().oneOf(formSchema[key].options.map((opt: any) => opt.value));\n                break;\n            case \"checkbox\":\n                _formData[key] = false;\n                if(formSchema[key].required) {\n                    _validationSchema[key] = Yup.bool().oneOf([true], 'Required')\n                }\n        }\n\n        if(formSchema[key].required){\n            _validationSchema[key] = _validationSchema[key].required(`${formSchema[key].label} is required`);\n        }\n    }\n\n    setFormData(_formData);\n    setValidationSchema(Yup.object().shape({ ..._validationSchema }));\n};\n\ninterface initDynamicFormProps {\n    formSchema: Object,\n    setFormData: Function,\n    setValidationSchema: Function,\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}